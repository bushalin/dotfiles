# Kill running processes
function pkill() {
    ps aux | fzf --height 40% --layout=reverse --prompt="SELECT process to kill: " | awk '{print $2}' | xargs -r sudo kill
}

# Kill tmux sessions
function tkill() {
    tmux kill-session -t $(tmux ls | fzf --height 40% --layout=reverse --prompt="SELECT session to kill: " | awk '{print $1}' )
}

# Create a new tmux session if not exist
# if exists -> attach to it
function tns() {
    local RESULT="$1"
    zoxide add "$RESULT" &>/dev/null
    local FOLDER=$(basename "$RESULT")
    local SESSION_NAME=$(echo "$FOLDER" | tr ' .:' '_')
    
    # if [ -d "$RESULT/.git" ]; then
    #     SESSION_NAME+="_$(git -C "$RESULT" symbolic-ref --short HEAD 2>/dev/null)"
    # fi
    
    if ! tmux has-session -t "$SESSION_NAME" 2>/dev/null; then
        tmux new-session -d -s "$SESSION_NAME" -c "$RESULT"
    fi
    
    if [ -z "$TMUX" ]; then
        tmux attach -t "$SESSION_NAME"
    else
        tmux switch-client -t "$SESSION_NAME"
    fi
}

function t_list() {
    PARAM=$1
    DIRS=$(find -L ~/AWL ~/hasib ~/dotfiles ~/hasib/repo ~/Hasib/Repositories -mindepth 1 -maxdepth 1 -type d 2> /dev/null)

    if [[ -z $PARAM ]]; then
        TMUX=$(tmux ls | awk '{print substr($1,1,length($1)-1)}')
        ZOXIDE=$(zoxide query --list)
        printf "%s\n%s\n%s" "$TMUX" "$ZOXIDE" "$DIRS" | sort --reverse
    fi

    case "$PARAM" in
        "-t")
            TMUX=$(tmux ls | awk '{print substr($1,1,length($1)-1)}')
            printf "%s\n" $TMUX
            ;;
        "-a")
            if [[ $(command -v zoxide) ]]; then
                DIRS=$(zoxide query --list)
                printf "%s" "$DIRS"
            fi
            ;;
        "-c")
            CONFIG=$(find -L ~/dotfiles -mindepth 1 -maxdepth 2 -type d 2> /dev/null)
            printf "%s" "$CONFIG"
            ;;
        *)
            TMUX=$(tmux ls | awk '{print substr($1,1,length($1)-1)}')
            ZOXIDE=$(zoxide query --list)
            printf "%s\n%s\n%s" "$TMUX" "$ZOXIDE" "$DIRS" | sort --reverse
            ;;
    esac
}

function t() {
    param=$1
    dirs=$(find -L ~/AWL ~/hasib ~/dotfiles ~/hasib/repo ~/Hasib/Repositories -mindepth 1 -maxdepth 1 -type d 2> /dev/null)

    if [[ -z "${param}" ]]; then
        if [[ $(command -v zoxide) 2> /dev/null ]]; then
            dirs=$(zoxide query --list)
        fi
        selected=$(echo $dirs | fzf --height 40% --layout=reverse --border=rounded --border-label="Connect TMUX session")
    else
        selected="${param}"
        if [ $(command -v zoxide) ] && [ $(zoxide query $param) ]; then
            selected=$(zoxide query $param)
        fi
    fi

    selected_name=$(basename "${selected}" | tr . _)
    tmux_running=$(pgrep tmux)

    if [[ -z "${selected_name}" ]]; then
        return
    fi

    # OK - tmux is not running
    if [[ -z "${tmux_running}" ]]; then
        tmux new-session -s "${selected_name}" -c "${selected}"
        return
    fi

    # OK - tmux is running but client is not attached, session with selected_name does not exist
    if [[ -z $TMUX ]] && ! tmux has-session -t=${selected_name} 2> /dev/null; then
        tmux new-session -s ${selected_name} -c "${selected}"
        tmux a -t ${selected_name}
        return
    fi

    # OK - tmux is running but client is not attached, session with selected_name exists
    if [[ -z $TMUX ]] && tmux has-session -t=${selected_name} 2> /dev/null; then
        tmux a -t ${selected_name}
        return
    fi

    # OK - tmux is running and client is attached, session with selected_name does not exist
    if [[ ! -z $TMUX ]] && ! tmux has-session -t=${selected_name} 2> /dev/null; then
        tmux new-session -ds ${selected_name} -c "${selected}"
        tmux switch-client -t ${selected_name}
        return
    fi

    # OK - tmux is running and client is attached, session with selected_name exists
    if [[ ! -z $TMUX ]] && tmux has-session -t=${selected_name} 2> /dev/null; then
        tmux switch-client -t ${selected_name}
        return
    fi
}
